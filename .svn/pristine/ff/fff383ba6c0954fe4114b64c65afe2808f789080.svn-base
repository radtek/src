using cn.justwin.Domain.Services;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Web.Script.Serialization;

namespace PMBase.Basic
{
    public class WXAPI
    {
        JavaScriptSerializer js = new JavaScriptSerializer();
        /// <summary>
        /// 获取 access_token
        /// </summary>
        /// <returns>返回 access_token</returns>
        public static string getToken()
        {
            #region
            /*
             获取access_token
            请求方式：GET（HTTPS）
            请求URL：https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=ID&corpsecret=SECRECT
            注：此处标注大写的单词ID和SECRET，为需要替换的变量，根据实际获取值更新。其它接口也采用相同的标注，不再说明。

            参数说明：

            参数	必须	说明
            corpid	是	企业ID
            corpsecret	是	应用的凭证密钥
            权限说明：

            每个应用有独立的secret，所以每个应用的access_token应该分开来获取

            返回结果：

            {
               "errcode":0，
               "errmsg":""，
               "access_token": "accesstoken000001",
               "expires_in": 7200
            }
            参数	说明
            access_token	获取到的凭证,最长为512字节
            expires_in	凭证的有效时间（秒）
            出错返回示例：

            {
               "errcode":40091,
               "errmsg":"secret is invalid"
            }
            第四步：缓存和刷新access_token

            开发者需要缓存access_token，用于后续接口的调用（注意：不能频繁调用gettoken接口，否则会受到频率拦截）。当access_token失效或过期时，需要重新获取。

            access_token的有效期通过返回的expires_in来传达，正常情况下为7200秒（2小时），有效期内重复获取返回相同结果，过期后获取会返回新的access_token。此时企业微信保证新旧两个access_token在短时间内同时可用（access_token对应的有效期内可用），以保证企业服务的平滑过渡。
            由于企业微信每个应用的access_token是彼此独立的，所以进行缓存时需要区分应用来进行存储。
            access_token至少保留512字节的存储空间。
            企业微信可能会出于运营需要，提前使access_token失效，开发者应实现access_token失效时重新获取的逻辑。
             */
            #endregion
            string strToken = null;
            try
            {
                strToken = HttpContext.Current.Request.Cookies["access_token"].Value;
            }
            catch
            {
                strToken = null;
            }
            if (strToken == null)
            {
                string tagUrl = "https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=" + new BasicConfigService().GetValue("corpId") + "&corpsecret=" + new BasicConfigService().GetValue("corpSecret") + "";
                HttpWebResponse response = HttpWebResponseUtility.CreateGetHttpResponse(tagUrl, null, null, null);
                StreamReader sr = new StreamReader(response.GetResponseStream());
                string strResult = sr.ReadToEnd();
                string access_token = strResult.Split(',')[2].Split(':')[1].Split('"')[1].ToString();
                HttpCookie httpCookie = new HttpCookie("access_token");
                httpCookie.Value = access_token;
                HttpContext.Current.Response.Cookies.Add(httpCookie);
                httpCookie.Expires = DateTime.Now.AddHours(1);
                return access_token;
            }
            else
            {
                return strToken;
            }
        }
        public static string getTicket()
        {
            #region
            /*
                获取jsapi_ticket

                生成签名之前必须先了解一下jsapi_ticket，jsapi_ticket是H5应用调用企业微信JS接口的临时票据。正常情况下，jsapi_ticket的有效期为7200秒，通过access_token来获取。由于获取jsapi_ticket的api调用次数非常有限，频繁刷新jsapi_ticket会导致api调用受限，影响自身业务，开发者必须在自己的服务全局缓存jsapi_ticket。

                请求方式：GET（HTTPS）
                请求URL：https://qyapi.weixin.qq.com/cgi-bin/get_jsapi_ticket?access_token=ACCESS_TOKEN

                参数说明：

                参数	必须	说明
                access_token	是	调用接口凭证，获取方式参考“获取企业access_token”
                返回结果：

                {
                    "errcode":0,
                    "errmsg":"ok",
                    "ticket":"bxLdikRXVbTPdHSM05e5u5sUoXNKd8-41ZO3MhKoyN5OfkWITDGgnr2fwJ0m9E8NYzWKVZvdVtaUgWvsdshFKA",
                    "expires_in":7200
                }
             */
            #endregion
            string strTicket = null;
            try
            {
                strTicket = HttpContext.Current.Request.Cookies["jsapi_ticket"].Value;
            }
            catch
            {
                strTicket = null;
            }
            if (strTicket == null)
            {
                string tagUrl = "https://qyapi.weixin.qq.com/cgi-bin/get_jsapi_ticket?access_token=" + getToken()+ "";
                HttpWebResponse response = HttpWebResponseUtility.CreateGetHttpResponse(tagUrl, null, null, null);
                StreamReader sr = new StreamReader(response.GetResponseStream());
                string strResult = sr.ReadToEnd();
                string ticket = strResult.Split(',')[2].Split(':')[1].Split('"')[1].ToString();
                HttpCookie httpCookie = new HttpCookie("jsapi_ticket");
                httpCookie.Value = ticket;
                HttpContext.Current.Response.Cookies.Add(httpCookie);
                httpCookie.Expires = DateTime.Now.AddHours(1);
                return ticket;
              }
            else
            {
                return strTicket;
            }
}
        /// <summary>
        /// 获取微信端 当前操作用户ID
        /// </summary>
        /// <param name="strCode">code</param>
        /// <returns></returns>
        public static string getUserIdByCode(string strCode)
        {
            string UserId = null;
            try
            {
                UserId = HttpContext.Current.Request.Cookies["UserId"].Value;
            }
            catch
            {
                UserId = null;
            }
            if (UserId == null)
            {
                string tagUrl = "https://qyapi.weixin.qq.com/cgi-bin/user/getuserinfo?access_token=" + getToken() + "&code=" + strCode + "";
                HttpWebResponse response = HttpWebResponseUtility.CreateGetHttpResponse(tagUrl, null, null, null);
                StreamReader sr = new StreamReader(response.GetResponseStream());
                string strResult = sr.ReadToEnd();//{ "UserId":"8aac9e075a8ca902015a8cfdd75d0018","DeviceId":"cd9e459ea708a948d5c2f5a6ca8838cf","errcode":0,"errmsg":"ok"}
                UserId = strResult.Split(',')[0].Split(':')[1].Split('"')[1].ToString();
                HttpCookie httpCookie = new HttpCookie("UserId");
                httpCookie.Value = UserId;
                HttpContext.Current.Response.Cookies.Add(httpCookie);
                httpCookie.Expires = DateTime.Now.AddHours(1);
                return UserId;
            }
            else
            {
                return UserId;
            }
        }
       
        /// <summary>
        /// 获取微信用户信息
        /// </summary>
        /// <param name="USERID">用户ID</param>
        /// <returns></returns>
        public static JObject getUserInfo(string USERID)
        {
            #region 微信 读取成员 说明
            /*
           在通讯录同步助手中此接口可以读取企业通讯录的所有成员信息，而企业自定义的应用可以读取该应用设置的可见范围内的成员信息。

            请求方式：GET（HTTPS）
            请求地址：https://qyapi.weixin.qq.com/cgi-bin/user/get?access_token=ACCESS_TOKEN&userid=USERID

            参数说明：

            参数	必须	说明
            access_token	是	调用接口凭证
            userid	是	成员UserID。对应管理端的帐号，企业内必须唯一。不区分大小写，长度为1~64个字节
            权限说明：

            系统应用须拥有指定部门的管理权限。

            返回结果：

            {
               "errcode": 0,
               "errmsg": "ok",
               "userid": "zhangsan",
               "name": "李四",
               "department": [1, 2],
               "order": [1, 2],
               "position": "后台工程师",
               "mobile": "15913215421",
               "gender": "1",
               "email": "zhangsan@gzdev.com",
               "isleader": 1,
               "avatar": "http://wx.qlogo.cn/mmopen/ajNVdqHZLLA3WJ6DSZUfiakYe37PKnQhBIeOQBO4czqrnZDS79FH5Wm5m4X69TBicnHFlhiafvDwklOpZeXYQQ2icg/0",
               "telephone": "020-123456",
               "english_name": "jackzhang",
               "extattr": {"attrs":[{"name":"爱好","value":"旅游"},{"name":"卡号","value":"1234567234"}]}，
               "status": 1
            }
             */
            #endregion
            string tagUrl = "https://qyapi.weixin.qq.com/cgi-bin/user/get?access_token=" + getToken() + "&userid=" + USERID + "";
            HttpWebResponse response = HttpWebResponseUtility.CreateGetHttpResponse(tagUrl, null, null, null);
            StreamReader sr = new StreamReader(response.GetResponseStream());
            string strResult = sr.ReadToEnd();
            JObject json1 = (JObject)JsonConvert.DeserializeObject(strResult);
           
            //JArray array = (JArray)json1;
            //string aa = "";
            //foreach (var jObject in array)
            //{
            //    //赋值属性
            //    aa = jObject["id"].ToString();//获取字符串中id值
            //}
            //return sr.ReadToEnd().Split(',')[0].Split(':')[1].ToString();
            return json1;
        }

        /// <summary>
        /// 创建部门 
        /// </summary>
        /// <param name="dataRow">数据信息行</param>
        /// <returns>返回结果</returns>
        public static string createWXdpt(DataRow dataRow)
        {
            #region 微信 创建部门 说明
            /*
            请求方式：POST（HTTPS）
            请求地址：https://qyapi.weixin.qq.com/cgi-bin/department/create?access_token=ACCESS_TOKEN

            请求包体：

            {
               "name": "广州研发中心",
               "parentid": 1,
               "order": 1,
               "id": 2
            }
            参数说明：

            参数	必须	说明
            access_token	是	调用接口凭证
            name	是	部门名称。长度限制为1~64个字节，字符不能包括\:?”<>｜
            parentid	是	父部门id，32位整型
            order	否	在父部门中的次序值。order值大的排序靠前。有效的值范围是[0, 2^32)
            id	否	部门id，32位整型。指定时必须大于1，否则自动生成
            权限说明：

            系统应用须拥有父部门的管理权限。

            注意，部门的最大层级为15层；部门总数不能超过3万个；每个部门下的节点不能超过3万个。建议保证创建的部门和对应部门成员是串行化处理。
            返回结果：

            {
               "errcode": 0,
               "errmsg": "created",
               "id": 2
            }
            参数说明：

            参数	说明
            errcode	返回码
            errmsg	对返回码的文本描述内容
            id	创建的部门id
            */
            #endregion
            string strToken = WXAPI.getToken();
            string PostUrl = "https://qyapi.weixin.qq.com/cgi-bin/department/create?access_token=" + strToken + "";
            Encoding encoding = Encoding.GetEncoding("UTF-8");//gb2312
            IDictionary<string, string> parameters = new Dictionary<string, string>();
            parameters.Add("name", "\"" + dataRow["V_BMMC"].ToString() + "\"");
            parameters.Add("parentid", "\"" + dataRow["i_sjdm"].ToString() + "\"");
            parameters.Add("order", "" + dataRow["i_xh"].ToString() + "");
            parameters.Add("id", "\"" + dataRow["i_bmdm"].ToString() + "\"");
            HttpWebResponse response = HttpWebResponseUtility.CreatePostHttpResponseWX(PostUrl, parameters, null, null, encoding, null);
            StreamReader sr = new StreamReader(response.GetResponseStream());
            return sr.ReadToEnd().Split(',')[0].Split(':')[1].ToString();
        }

        /// <summary>
        /// 更新部门
        /// </summary>
        /// <param name="dataRow">数据信息行</param>
        /// <returns>返回结果</returns>
        public static string updateWXdpt(DataRow dataRow)
        {
            #region 微信 更新部门 说明
            /*
             请求方式：POST（HTTPS）
            请求地址：https://qyapi.weixin.qq.com/cgi-bin/department/update?access_token=ACCESS_TOKEN

            请求包体（如果非必须的字段未指定，则不更新该字段）：

            {
               "id": 2,
               "name": "广州研发中心",
               "parentid": 1,
               "order": 1
            }
            参数说明：

            参数	必须	说明
            access_token	是	调用接口凭证
            id	是	部门id
            name	否	部门名称。长度限制为1~64个字节，字符不能包括\:?”<>｜
            parentid	否	父部门id
            order	否	在父部门中的次序值。order值大的排序靠前。有效的值范围是[0, 2^32)
            权限说明 ：

            系统应用须拥有指定部门的管理权限。

            注意，部门的最大层级为15层；部门总数不能超过3万个；每个部门下的节点不能超过3万个。
            返回结果：

            {
               "errcode": 0,
               "errmsg": "updated"
            }
             */
            #endregion
            string strToken = WXAPI.getToken();
            string PostUrl = "https://qyapi.weixin.qq.com/cgi-bin/department/update?access_token=" + strToken + "";
            Encoding encoding = Encoding.GetEncoding("UTF-8");//gb2312
            IDictionary<string, string> parameters = new Dictionary<string, string>();
            parameters.Add("name", "\"" + dataRow["V_BMMC"].ToString() + "\"");
            parameters.Add("parentid", "\"" + dataRow["i_sjdm"].ToString() + "\"");
            parameters.Add("order", "" + dataRow["i_xh"].ToString() + "");
            parameters.Add("id", "\"" + dataRow["i_bmdm"].ToString() + "\"");
            HttpWebResponse response = HttpWebResponseUtility.CreatePostHttpResponseWX(PostUrl, parameters, null, null, encoding, null);
            StreamReader sr = new StreamReader(response.GetResponseStream());
            return sr.ReadToEnd().Split(',')[0].Split(':')[1].ToString();
        }

        /// <summary>
        /// 删除部门
        /// </summary>
        /// <param name="ID">部门ID</param>
        /// <returns>返回结果</returns>
        public static string deletedWXdpt(string ID)
        {
            #region 微信 删除部门 说明
            /*
             请求方式：GET（HTTPS）
            请求地址：https://qyapi.weixin.qq.com/cgi-bin/department/delete?access_token=ACCESS_TOKEN&id=ID

            参数说明 ：

            参数	必须	说明
            access_token	是	调用接口凭证
            id	否	部门id。（注：不能删除根部门；不能删除含有子部门、成员的部门）
            权限说明：

            系统应用须拥有指定部门的管理权限。

            返回结果：

            {
               "errcode": 0,
               "errmsg": "deleted"
            }
             */
            #endregion
            string strToken = WXAPI.getToken();
            string tagUrl = "https://qyapi.weixin.qq.com/cgi-bin/department/delete?access_token=" + strToken + "&id=" + ID + "";
            HttpWebResponse response = HttpWebResponseUtility.CreateGetHttpResponse(tagUrl, null, null, null);
            StreamReader sr = new StreamReader(response.GetResponseStream());
            return sr.ReadToEnd().Split(',')[0].Split(':')[1].ToString();
        }

        /// <summary>
        /// 创建人员
        /// </summary>
        /// <param name="dataRow">数据信息行</param>
        /// <returns>返回结果</returns>
        public static string createWXry(DataRow dataRow) {
            #region 微信 创建成员 说明  
            /*
             创建成员
            请求方式：POST（HTTPS）
            请求地址：https://qyapi.weixin.qq.com/cgi-bin/user/create?access_token=ACCESS_TOKEN

            请求包体：

            {
               "userid": "zhangsan",
               "name": "张三",
               "english_name": "jackzhang",
               "mobile": "15913215421",
               "department": [1, 2],
               "order":[10,40],
               "position": "产品经理",
               "gender": "1",
               "email": "zhangsan@gzdev.com",
               "isleader": 1,
               "enable":1,
               "avatar_mediaid": "2-G6nrLmr5EC3MNb_-zL1dDdzkd0p7cNliYu9V5w7o8K0",
               "telephone": "020-123456"，
               "extattr": {"attrs":[{"name":"爱好","value":"旅游"},{"name":"卡号","value":"1234567234"}]}
            }
            参数说明：

            参数	必须	说明
            access_token	是	调用接口凭证
            userid	是	成员UserID。对应管理端的帐号，企业内必须唯一。不区分大小写，长度为1~64个字节
            name	是	成员名称。长度为1~64个字节
            english_name	否	英文名。长度为1-64个字节。
            mobile	否	手机号码。企业内必须唯一，mobile/email二者不能同时为空
            department	是	成员所属部门id列表,不超过20个
            order	否	部门内的排序值，默认为0。数量必须和department一致，数值越大排序越前面。有效的值范围是[0, 2^32)
            position	否	职位信息。长度为0~64个字节
            gender	否	性别。1表示男性，2表示女性
            email	否	邮箱。长度为0~64个字节。企业内必须唯一，mobile/email二者不能同时为空
            telephone	否	座机。长度0-64个字节。
            isleader	否	上级字段，标识是否为上级。
            avatar_mediaid	否	成员头像的mediaid，通过多媒体接口上传图片获得的mediaid
            enable	否	启用/禁用成员。1表示启用成员，0表示禁用成员
            extattr	否	自定义字段。自定义字段需要先在WEB管理端“我的企业” — “通讯录管理”添加，否则忽略未知属性的赋值
            权限说明：

            系统应用须拥有指定部门的管理权限。

            注意，每个部门下的节点不能超过3万个。建议保证创建department对应的部门和创建成员是串行化处理。
            返回结果：
            {
               "errcode": 0,
               "errmsg": "created"
            }
             */
            #endregion
            string strToken = WXAPI.getToken();
                string PostUrl = "https://qyapi.weixin.qq.com/cgi-bin/user/create?access_token=" + strToken + "";
                Encoding encoding = Encoding.GetEncoding("UTF-8");//gb2312
            IDictionary<string, string> parameters = new Dictionary<string, string>();
                parameters.Add("userid", "\""+ dataRow["v_yhdm"].ToString() +"\"");
                parameters.Add("name", "\"" + dataRow["v_xm"].ToString() + "\"");
                parameters.Add("mobile", "\"" + dataRow["MobilePhoneCode"].ToString() + "\"");
               // parameters.Add("email", "\"xsrsl1686@126.com\"");
                parameters.Add("department", "[" + dataRow["i_bmdm"].ToString() + "]");
                HttpWebResponse response = HttpWebResponseUtility.CreatePostHttpResponseWX(PostUrl, parameters, null, null, encoding, null);
                StreamReader sr = new StreamReader(response.GetResponseStream());
               return sr.ReadToEnd().Split(',')[0].Split(':')[1].ToString();
        }
       
        /// <summary>
        /// 更新人员
        /// </summary>
        /// <param name="dataRow">数据信息行</param>
        /// <returns>返回结果</returns>
        public static string updateWXry(DataRow dataRow)
        {
            #region 微信 更新人员 说明  
            /*
             更新成员
            请求方式：POST（HTTPS）
            请求地址：https://qyapi.weixin.qq.com/cgi-bin/user/update?access_token=ACCESS_TOKEN

            请求包体：

            {
               "userid": "zhangsan",
               "name": "李四",
               "department": [1],
               "order": [10],
               "position": "后台工程师",
               "mobile": "15913215421",
               "gender": "1",
               "email": "zhangsan@gzdev.com",
               "isleader": 0,
               "enable": 1,
               "avatar_mediaid": "2-G6nrLmr5EC3MNb_-zL1dDdzkd0p7cNliYu9V5w7o8K0",
               "telephone": "020-123456",
               "english_name": "jackzhang",
               "extattr": {"attrs":[{"name":"爱好","value":"旅游"},{"name":"卡号","value":"1234567234"}]}
            }
            参数说明：

            参数	必须	说明
            access_token	是	调用接口凭证
            userid	是	成员UserID。对应管理端的帐号，企业内必须唯一。不区分大小写，长度为1~64个字节
            name	否	成员名称。长度为1~64个字节
            english_name	否	英文名。长度为1-64个字节。
            mobile	否	手机号码。企业内必须唯一。若成员已激活企业微信，则需成员自行修改
            department	否	成员所属部门id列表,不超过20个
            order	否	部门内的排序值，默认为0。数量必须和department一致，数值越大排序越前面。有效的值范围是[0, 2^32)
            position	否	职位信息。长度为0~64个字节
            gender	否	性别。1表示男性，2表示女性
            email	否	邮箱。长度为0~64个字节。企业内必须唯一
            telephone	否	座机。长度0-64个字节。
            isleader	否	上级字段，标识是否为上级。
            avatar_mediaid	否	成员头像的mediaid，通过多媒体接口上传图片获得的mediaid
            enable	否	启用/禁用成员。1表示启用成员，0表示禁用成员
            extattr	否	扩展属性。扩展属性需要在WEB管理端创建后才生效，否则忽略未知属性的赋值
            特别地，如果userid由系统自动生成，则仅允许修改一次。新值可由new_userid字段指定。
            权限说明：

            系统应用须拥有指定部门、成员的管理权限。

            注意，每个部门下的节点不能超过3万个。
            返回结果：

            {
               "errcode": 0,
               "errmsg": "updated"
            }
             */
            #endregion
            string strToken = WXAPI.getToken();
            string PostUrl = "https://qyapi.weixin.qq.com/cgi-bin/user/update?access_token=" + strToken + "";
            Encoding encoding = Encoding.GetEncoding("UTF-8");//gb2312
            IDictionary<string, string> parameters = new Dictionary<string, string>();
            parameters.Add("userid", "\"" + dataRow["v_yhdm"].ToString() + "\"");
            parameters.Add("name", "\"" + dataRow["v_xm"].ToString() + "\"");
            parameters.Add("mobile", "\"" + dataRow["MobilePhoneCode"].ToString() + "\"");
            // parameters.Add("email", "\"xsrsl1686@126.com\"");
            parameters.Add("department", "[" + dataRow["i_bmdm"].ToString() + "]");
            HttpWebResponse response = HttpWebResponseUtility.CreatePostHttpResponseWX(PostUrl, parameters, null, null, encoding, null);
            StreamReader sr = new StreamReader(response.GetResponseStream());
            return sr.ReadToEnd().Split(',')[0].Split(':')[1].ToString();
        }
      
        /// <summary>
        /// 删除人员
        /// </summary>
        /// <param name="ID">人员ID</param>
        /// <returns>返回结果</returns>
        public static string deletedWXry(string ID)
        {
            #region 微信 删除人员 说明
            /*
            删除成员
            请求方式：GET（HTTPS）
            请求地址：https://qyapi.weixin.qq.com/cgi-bin/user/delete?access_token=ACCESS_TOKEN&userid=USERID

            参数说明：

            参数	必须	说明
            access_token	是	调用接口凭证
            userid	是	成员UserID。对应管理端的帐号
            权限说明：

            系统应用须拥有指定成员的管理权限。

            返回结果：

            {
               "errcode": 0,
               "errmsg": "deleted"
            }
             */
            #endregion
            string strToken = WXAPI.getToken();
            string tagUrl = "https://qyapi.weixin.qq.com/cgi-bin/user/delete?access_token=" + strToken + "&userid=" + ID + "";
            HttpWebResponse response = HttpWebResponseUtility.CreateGetHttpResponse(tagUrl, null, null, null);
            StreamReader sr = new StreamReader(response.GetResponseStream());
            return sr.ReadToEnd().Split(',')[0].Split(':')[1].ToString();
        }

        //创建随机字符串  
        public static string createNonceStr()
        {

            int length = 16;
            string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            string str = "";
            Random rad = new Random();
            for (int i = 0; i < length; i++)
            {
                str += chars.Substring(rad.Next(0, chars.Length - 1), 1);
            }
            return str;
        }
        /// <summary>  
        /// 将c# DateTime时间格式转换为Unix时间戳格式  
        /// </summary>  
        /// <param name="time">时间</param>  
        /// <returns>double</returns>  
        public static int ConvertDateTimeInt(System.DateTime time)
        {
            int intResult = 0;
            System.DateTime startTime = TimeZone.CurrentTimeZone.ToLocalTime(new System.DateTime(1970, 1, 1));
            intResult = Convert.ToInt32((time - startTime).TotalSeconds);
            return intResult;
        }
        //SHA1哈希加密算法  
        public static string SHA1_Hash(string str_sha1_in)
        {
            SHA1 sha1 = new SHA1CryptoServiceProvider();
            byte[] bytes_sha1_in = System.Text.UTF8Encoding.Default.GetBytes(str_sha1_in);
            byte[] bytes_sha1_out = sha1.ComputeHash(bytes_sha1_in);
            string str_sha1_out = BitConverter.ToString(bytes_sha1_out);
            str_sha1_out = str_sha1_out.Replace("-", "").ToLower();
            return str_sha1_out;
        }
        ///   <summary> 
        ///   得到一个汉字的拼音第一个字母，如果是一个英文字母则直接返回大写字母 
        ///   </summary> 
        ///   <param   name="CnChar">单个汉字</param> 
        ///   <returns>单个大写字母</returns> 
        public static string GetCharSpellCode(string CnChar)
        {
            long iCnChar;

            byte[] ZW = System.Text.Encoding.Default.GetBytes(CnChar);

            //如果是字母，则直接返回 
            if (ZW.Length == 1)
            {
                return CnChar.ToUpper();
            }
            else
            {
                //   get   the     array   of   byte   from   the   single   char    
                int i1 = (short)(ZW[0]);
                int i2 = (short)(ZW[1]);
                iCnChar = i1 * 256 + i2;
            }
            #region table   of   the   constant   list
            //expresstion 
            //table   of   the   constant   list 
            // 'A';           //45217..45252 
            // 'B';           //45253..45760 
            // 'C';           //45761..46317 
            // 'D';           //46318..46825 
            // 'E';           //46826..47009 
            // 'F';           //47010..47296 
            // 'G';           //47297..47613 

            // 'H';           //47614..48118 
            // 'J';           //48119..49061 
            // 'K';           //49062..49323 
            // 'L';           //49324..49895 
            // 'M';           //49896..50370 
            // 'N';           //50371..50613 
            // 'O';           //50614..50621 
            // 'P';           //50622..50905 
            // 'Q';           //50906..51386 

            // 'R';           //51387..51445 
            // 'S';           //51446..52217 
            // 'T';           //52218..52697 
            //没有U,V 
            // 'W';           //52698..52979 
            // 'X';           //52980..53640 
            // 'Y';           //53689..54480 
            // 'Z';           //54481..55289 
            #endregion
            //   iCnChar match     the   constant 
            if ((iCnChar >= 45217) && (iCnChar <= 45252))
            {
                return "A";
            }
            else if ((iCnChar >= 45253) && (iCnChar <= 45760))
            {
                return "B";
            }
            else if ((iCnChar >= 45761) && (iCnChar <= 46317))
            {
                return "C";
            }
            else if ((iCnChar >= 46318) && (iCnChar <= 46825))
            {
                return "D";
            }
            else if ((iCnChar >= 46826) && (iCnChar <= 47009))
            {
                return "E";
            }
            else if ((iCnChar >= 47010) && (iCnChar <= 47296))
            {
                return "F";
            }
            else if ((iCnChar >= 47297) && (iCnChar <= 47613))
            {
                return "G";
            }
            else if ((iCnChar >= 47614) && (iCnChar <= 48118))
            {
                return "H";
            }
            else if ((iCnChar >= 48119) && (iCnChar <= 49061))
            {
                return "J";
            }
            else if ((iCnChar >= 49062) && (iCnChar <= 49323))
            {
                return "K";
            }
            else if ((iCnChar >= 49324) && (iCnChar <= 49895))
            {
                return "L";
            }
            else if ((iCnChar >= 49896) && (iCnChar <= 50370))
            {
                return "M";
            }

            else if ((iCnChar >= 50371) && (iCnChar <= 50613))
            {
                return "N";
            }
            else if ((iCnChar >= 50614) && (iCnChar <= 50621))
            {
                return "O";
            }
            else if ((iCnChar >= 50622) && (iCnChar <= 50905))
            {
                return "P";
            }
            else if ((iCnChar >= 50906) && (iCnChar <= .51386))
            {
                return "Q";
            }
            else if ((iCnChar >= 51387) && (iCnChar <= 51445))
            {
                return "R";
            }
            else if ((iCnChar >= 51446) && (iCnChar <= 52217))
            {
                return "S";
            }
            else if ((iCnChar >= 52218) && (iCnChar <= 52697))
            {
                return "T";
            }
            else if ((iCnChar >= 52698) && (iCnChar <= 52979))
            {
                return "W";
            }
            else if ((iCnChar >= 52980) && (iCnChar <= 53640))
            {
                return "X";
            }
            else if ((iCnChar >= 53689) && (iCnChar <= 54480))
            {
                return "Y";
            }
            else if ((iCnChar >= 54481) && (iCnChar <= 55289))
            {
                return "Z";
            }
            else return ("?");
        }

    }
}
